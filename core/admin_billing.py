"""
–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–æ–π—Å–æ–≤, –ø–ª–∞—Ç–µ–∂–µ–π –∏ –±–∞–ª–∞–Ω—Å–æ–≤
=========================================================

–ü—Ä–æ—Å—Ç–æ–π –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å:
- –ò–Ω–≤–æ–π—Å–∞–º–∏
- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
- –ë–∞–ª–∞–Ω—Å–∞–º–∏

–ê–≤—Ç–æ—Ä—ã: AI Assistant
–î–∞—Ç–∞: 30 —Å–µ–Ω—Ç—è–±—Ä—è 2025
"""

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse, path
from django.shortcuts import render, redirect
from django.contrib import messages
from django.db.models import Sum, Q
from django.utils import timezone
from decimal import Decimal

from .models_billing import NewInvoice, InvoiceItem, Transaction
from .services.billing_service import BillingService


# ============================================================================
# INLINE –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –∏–Ω–≤–æ–π—Å–∞
# ============================================================================

class InvoiceItemInline(admin.TabularInline):
    """Inline –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–Ω–≤–æ–π—Å–∞"""
    
    model = InvoiceItem
    extra = 1
    fields = ('description', 'car', 'quantity', 'unit_price', 'total_price')
    readonly_fields = ('total_price',)
    
    def get_formset(self, request, obj=None, **kwargs):
        formset = super().get_formset(request, obj, **kwargs)
        # –£–±–∏—Ä–∞–µ–º help_text –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        for field in formset.form.base_fields.values():
            field.help_text = ''
        return formset


# ============================================================================
# –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –ò–ù–í–û–ô–°–û–í
# ============================================================================

@admin.register(NewInvoice)
class NewInvoiceAdmin(admin.ModelAdmin):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏–Ω–≤–æ–π—Å–æ–≤
    """
    
    class Media:
        css = {
            'all': ('admin/css/widgets.css', 'css/invoice_admin.css',)
        }
        js = ('admin/js/SelectBox.js', 'admin/js/SelectFilter2.js',)
    
    list_display = (
        'number_display',
        'date',
        'issuer_display',
        'recipient_display',
        'total_display',
        'paid_amount_display',
        'remaining_display',
        'status_display',
        'due_date',
        'actions_display'
    )
    
    list_filter = (
        'status',
        'date',
        'due_date',
        'issuer_company',
        'issuer_warehouse',
        'issuer_line',
        'issuer_carrier',
    )
    
    search_fields = (
        'number',
        'recipient_client__name',
        'recipient_warehouse__name',
        'recipient_line__name',
        'recipient_carrier__name',
        'recipient_company__name',
        'issuer_company__name',
        'issuer_warehouse__name',
        'issuer_line__name',
        'issuer_carrier__name',
        'notes',
    )
    
    readonly_fields = (
        'number',
        'subtotal',
        'total',
        'paid_amount',
        'created_at',
        'updated_at',
        'created_by',
        'remaining_amount_display',
        'status_info_display',
        'payment_history_display',
    )
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'number',
                'date',
                'due_date',
                'status',
            )
        }),
        ('–ö—Ç–æ –≤—ã—Å—Ç–∞–≤–∏–ª (—É–∫–∞–∂–∏—Ç–µ –û–î–ù–û)', {
            'fields': (
                ('issuer_company', 'issuer_warehouse', 'issuer_line', 'issuer_carrier'),
            ),
            'classes': ('issuer-fields',),
        }),
        ('–ö–æ–º—É –≤—ã—Å—Ç–∞–≤–ª–µ–Ω (—É–∫–∞–∂–∏—Ç–µ –û–î–ù–û)', {
            'fields': (
                ('recipient_company', 'recipient_client', 'recipient_warehouse', 'recipient_line', 'recipient_carrier'),
            ),
            'classes': ('recipient-fields',),
        }),
        ('üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ (–ø–æ–∑–∏—Ü–∏–∏ —Å–æ–∑–¥–∞–¥—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!)', {
            'fields': ('cars',),
        }),
        ('–§–∏–Ω–∞–Ω—Å—ã', {
            'fields': (
                'subtotal',
                'discount',
                'tax',
                'total',
                'paid_amount',
                'remaining_amount_display',
                'status_info_display',
            )
        }),
        ('–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π', {
            'fields': ('payment_history_display',),
            'classes': ('collapse',),
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': (
                'notes',
                'created_at',
                'updated_at',
                'created_by',
            ),
            'classes': ('collapse',),
        }),
    )
    
    inlines = [InvoiceItemInline]
    
    filter_horizontal = ('cars',)  # –£–¥–æ–±–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ
    
    actions = ['mark_as_paid', 'cancel_invoices', 'export_to_pdf', 'regenerate_items']
    
    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        super().save_model(request, obj, form, change)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å cars (ManyToMany —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ save_related)
    
    def save_related(self, request, form, formsets, change):
        """–ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ManyToMany —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–≤—è–∑–∏
        super().save_related(request, form, formsets, change)
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
        if form.instance.cars.exists():
            form.instance.regenerate_items_from_cars()
            messages.success(request, f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ {form.instance.items.count()} –ø–æ–∑–∏—Ü–∏–π –∏–∑ —É—Å–ª—É–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!")
    
    actions = ['mark_as_paid', 'cancel_invoices', 'export_to_pdf', 'regenerate_items']
    
    # ========================================================================
    # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–û–õ–ï–ô –í –°–ü–ò–°–ö–ï
    # ========================================================================
    
    def number_display(self, obj):
        """–ù–æ–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞ —Å —Å—Å—ã–ª–∫–æ–π"""
        url = reverse('admin:core_newinvoice_change', args=[obj.pk])
        return format_html('<a href="{}" style="font-weight: bold;">{}</a>', url, obj.number)
    number_display.short_description = '–ù–æ–º–µ—Ä'
    number_display.admin_order_field = 'number'
    
    def issuer_display(self, obj):
        """–í—ã—Å—Ç–∞–≤–∏—Ç–µ–ª—å"""
        issuer = obj.issuer
        if issuer:
            return format_html(
                '<strong>{}</strong>',
                str(issuer)
            )
        return '-'
    issuer_display.short_description = '–í—ã—Å—Ç–∞–≤–∏—Ç–µ–ª—å'
    
    def recipient_display(self, obj):
        """–ü–æ–ª—É—á–∞—Ç–µ–ª—å"""
        recipient = obj.recipient
        if recipient:
            return format_html(
                '<strong>{}</strong>',
                str(recipient)
            )
        return '-'
    recipient_display.short_description = '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'
    
    def total_display(self, obj):
        """–ò—Ç–æ–≥–æ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        amount = f"{obj.total:.2f}"
        return format_html(
            '<span style="font-weight: bold; font-size: 1.1em;">{}</span>',
            amount
        )
    total_display.short_description = '–ò—Ç–æ–≥–æ'
    total_display.admin_order_field = 'total'
    
    def paid_amount_display(self, obj):
        """–û–ø–ª–∞—á–µ–Ω–æ"""
        if obj.paid_amount > 0:
            color = '#28a745' if obj.paid_amount >= obj.total else '#ffc107'
            amount = f"{obj.paid_amount:.2f}"
            return format_html(
                '<span style="color: {}; font-weight: bold;">{}</span>',
                color,
                amount
            )
        return format_html('<span style="color: #999;">0.00</span>')
    paid_amount_display.short_description = '–û–ø–ª–∞—á–µ–Ω–æ'
    paid_amount_display.admin_order_field = 'paid_amount'
    
    def remaining_display(self, obj):
        """–û—Å—Ç–∞—Ç–æ–∫"""
        remaining = obj.remaining_amount
        if remaining > 0:
            amount = f"{remaining:.2f}"
            return format_html(
                '<span style="color: #dc3545; font-weight: bold;">{}</span>',
                amount
            )
        return format_html('<span style="color: #28a745;">‚úì</span>')
    remaining_display.short_description = '–û—Å—Ç–∞—Ç–æ–∫'
    
    def status_display(self, obj):
        """–°—Ç–∞—Ç—É—Å —Å —Ü–≤–µ—Ç–æ–º"""
        colors = {
            'DRAFT': '#6c757d',
            'ISSUED': '#007bff',
            'PARTIALLY_PAID': '#ffc107',
            'PAID': '#28a745',
            'OVERDUE': '#dc3545',
            'CANCELLED': '#6c757d',
        }
        color = colors.get(obj.status, '#6c757d')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
        icon = ''
        if obj.is_overdue:
            icon = '‚ö† '
        
        return format_html(
            '<span style="background-color: {}; color: white; padding: 3px 8px; border-radius: 3px; font-size: 0.9em;">{}{}</span>',
            color,
            icon,
            obj.get_status_display()
        )
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    status_display.admin_order_field = 'status'
    
    def actions_display(self, obj):
        """–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        if obj.status in ['ISSUED', 'PARTIALLY_PAID', 'OVERDUE']:
            pay_url = reverse('admin:pay_invoice', args=[obj.pk])
            return format_html(
                '<a href="{}" class="button" style="background: #28a745; color: white; padding: 3px 10px; border-radius: 3px; text-decoration: none;">üí≥ –û–ø–ª–∞—Ç–∏—Ç—å</a>',
                pay_url
            )
        elif obj.status == 'PAID':
            return format_html('<span style="color: #28a745;">‚úì –û–ø–ª–∞—á–µ–Ω</span>')
        return '-'
    actions_display.short_description = '–î–µ–π—Å—Ç–≤–∏—è'
    
    # ========================================================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï READONLY –ü–û–õ–Ø
    # ========================================================================
    
    def remaining_amount_display(self, obj):
        """–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ"""
        remaining = obj.remaining_amount
        if remaining > 0:
            amount = f"{remaining:.2f}"
            return format_html(
                '<span style="font-size: 1.2em; color: #dc3545; font-weight: bold;">{}</span>',
                amount
            )
        return format_html('<span style="color: #28a745; font-size: 1.2em;">‚úì –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω</span>')
    remaining_amount_display.short_description = '–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ'
    
    def status_info_display(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ"""
        info = []
        
        if obj.is_overdue:
            days_overdue = abs(obj.days_until_due)
            info.append(format_html(
                '<div style="background: #fff3cd; border-left: 4px solid #dc3545; padding: 10px; margin: 5px 0;">'
                '<strong>‚ö† –ü–†–û–°–†–û–ß–ï–ù</strong><br>'
                '–ü—Ä–æ—Å—Ä–æ—á–∫–∞: {} –¥–Ω.'
                '</div>',
                days_overdue
            ))
        elif obj.days_until_due <= 3 and obj.status not in ['PAID', 'CANCELLED']:
            info.append(format_html(
                '<div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 10px; margin: 5px 0;">'
                '<strong>‚ö† –°–†–û–ß–ù–û</strong><br>'
                '–î–æ —Å—Ä–æ–∫–∞ –æ–ø–ª–∞—Ç—ã: {} –¥–Ω.'
                '</div>',
                obj.days_until_due
            ))
        
        if obj.paid_amount > obj.total:
            overpayment = obj.paid_amount - obj.total
            overpayment_str = f"{overpayment:.2f}"
            info.append(format_html(
                '<div style="background: #d1ecf1; border-left: 4px solid #17a2b8; padding: 10px; margin: 5px 0;">'
                '<strong>‚Ñπ –ü–ï–†–ï–ü–õ–ê–¢–ê</strong><br>'
                '–ü–µ—Ä–µ–ø–ª–∞—á–µ–Ω–æ: {}'
                '</div>',
                overpayment_str
            ))
        
        return format_html(''.join(info)) if info else '–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π'
    status_info_display.short_description = '–°—Ç–∞—Ç—É—Å –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è'
    
    def payment_history_display(self, obj):
        """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        transactions = obj.transactions.all().order_by('-date')
        
        if not transactions:
            return format_html('<p style="color: #999;">–ü–ª–∞—Ç–µ–∂–µ–π –µ—â–µ –Ω–µ –±—ã–ª–æ</p>')
        
        html = '<table style="width: 100%; border-collapse: collapse;">'
        html += '<tr style="background: #f5f5f5;"><th style="padding: 8px; text-align: left;">–î–∞—Ç–∞</th><th style="padding: 8px; text-align: left;">–ù–æ–º–µ—Ä</th><th style="padding: 8px; text-align: left;">–¢–∏–ø</th><th style="padding: 8px; text-align: left;">–°–ø–æ—Å–æ–±</th><th style="padding: 8px; text-align: right;">–°—É–º–º–∞</th></tr>'
        
        for trx in transactions:
            color = '#28a745' if trx.type == 'PAYMENT' else '#dc3545'
            trx_amount = f"{trx.amount:.2f}"
            html += f'''
            <tr style="border-bottom: 1px solid #ddd;">
                <td style="padding: 8px;">{trx.date.strftime("%d.%m.%Y %H:%M")}</td>
                <td style="padding: 8px;">{trx.number}</td>
                <td style="padding: 8px;">{trx.get_type_display()}</td>
                <td style="padding: 8px;">{trx.get_method_display()}</td>
                <td style="padding: 8px; text-align: right; color: {color}; font-weight: bold;">{trx_amount}</td>
            </tr>
            '''
        
        html += '</table>'
        return format_html(html)
    payment_history_display.short_description = '–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'
    
    # ========================================================================
    # –î–ï–ô–°–¢–í–ò–Ø
    # ========================================================================
    
    def mark_as_paid(self, request, queryset):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ"""
        updated = 0
        for invoice in queryset:
            if invoice.status != 'PAID':
                invoice.paid_amount = invoice.total
                invoice.status = 'PAID'
                invoice.save()
                updated += 1
        
        self.message_user(request, f'–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ: {updated} –∏–Ω–≤–æ–π—Å–æ–≤', messages.SUCCESS)
    mark_as_paid.short_description = "‚úì –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ"
    
    def cancel_invoices(self, request, queryset):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∏–Ω–≤–æ–π—Å—ã"""
        cancelled = 0
        errors = 0
        
        for invoice in queryset:
            try:
                BillingService.cancel_invoice(invoice, reason="–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É")
                cancelled += 1
            except ValueError as e:
                errors += 1
        
        if cancelled > 0:
            self.message_user(request, f'–û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled} –∏–Ω–≤–æ–π—Å–æ–≤', messages.SUCCESS)
        if errors > 0:
            self.message_user(request, f'–û—à–∏–±–æ–∫: {errors} –∏–Ω–≤–æ–π—Å–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –±—ã–ª–∏ –ø–ª–∞—Ç–µ–∂–∏)', messages.WARNING)
    cancel_invoices.short_description = "‚úó –û—Ç–º–µ–Ω–∏—Ç—å –∏–Ω–≤–æ–π—Å—ã"
    
    def export_to_pdf(self, request, queryset):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.message_user(request, '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏', messages.INFO)
    export_to_pdf.short_description = "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"
    
    def regenerate_items(self, request, queryset):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        count = 0
        for invoice in queryset:
            if invoice.cars.exists():
                invoice.regenerate_items_from_cars()
                count += 1
        
        if count > 0:
            self.message_user(request, f'‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –¥–ª—è {count} –∏–Ω–≤–æ–π—Å–æ–≤', messages.SUCCESS)
        else:
            self.message_user(request, '‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–≤–æ–π—Å—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏', messages.WARNING)
    regenerate_items.short_description = "üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
    
    # ========================================================================
    # –ö–ê–°–¢–û–ú–ù–´–ï –£–†–õ–´
    # ========================================================================
    
    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('<int:invoice_id>/pay/', self.admin_site.admin_view(self.pay_invoice_view), name='pay_invoice'),
        ]
        return custom_urls + urls
    
    def pay_invoice_view(self, request, invoice_id):
        """–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞"""
        invoice = NewInvoice.objects.get(pk=invoice_id)
        
        if request.method == 'POST':
            try:
                amount = Decimal(request.POST.get('amount', 0))
                method = request.POST.get('method', 'CASH')
                description = request.POST.get('description', '')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
                payer = invoice.recipient
                
                result = BillingService.pay_invoice(
                    invoice=invoice,
                    amount=amount,
                    method=method,
                    payer=payer,
                    description=description,
                    created_by=request.user
                )
                
                messages.success(request, f'–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω! –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {result["transaction"].number}')
                
                if result['overpayment'] > 0:
                    messages.warning(request, f'–í–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ {result["overpayment"]:.2f}')
                
                return redirect('admin:core_newinvoice_change', invoice_id)
                
            except Exception as e:
                messages.error(request, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}')
        
        context = {
            'invoice': invoice,
            'remaining': invoice.remaining_amount,
            'opts': self.model._meta,
            'has_view_permission': self.has_view_permission(request),
        }
        
        return render(request, 'admin/invoice_pay.html', context)


# ============================================================================
# –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô
# ============================================================================

@admin.register(Transaction)
class TransactionAdmin(admin.ModelAdmin):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    
    list_display = (
        'number_display',
        'date',
        'type_display',
        'method_display',
        'sender_display',
        'recipient_display',
        'amount_display',
        'status_display',
        'invoice_link',
    )
    
    list_filter = (
        'type',
        'method',
        'status',
        'date',
    )
    
    search_fields = (
        'number',
        'description',
        'invoice__number',
    )
    
    readonly_fields = (
        'number',
        'date',
        'created_at',
        'created_by',
        'sender_info_display',
        'recipient_info_display',
    )
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'number',
                'date',
                'type',
                'method',
                'status',
            )
        }),
        ('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', {
            'fields': (
                ('from_client', 'from_warehouse'),
                ('from_line', 'from_carrier', 'from_company'),
                'sender_info_display',
            )
        }),
        ('–ü–æ–ª—É—á–∞—Ç–µ–ª—å', {
            'fields': (
                ('to_client', 'to_warehouse'),
                ('to_line', 'to_carrier', 'to_company'),
                'recipient_info_display',
            )
        }),
        ('–î–µ—Ç–∞–ª–∏', {
            'fields': (
                'amount',
                'invoice',
                'description',
            )
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': (
                'created_at',
                'created_by',
            ),
            'classes': ('collapse',),
        }),
    )
    
    # ========================================================================
    # –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–û–õ–ï–ô
    # ========================================================================
    
    def number_display(self, obj):
        """–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        return format_html('<strong>{}</strong>', obj.number)
    number_display.short_description = '–ù–æ–º–µ—Ä'
    number_display.admin_order_field = 'number'
    
    def type_display(self, obj):
        """–¢–∏–ø —Å –∏–∫–æ–Ω–∫–æ–π"""
        icons = {
            'PAYMENT': 'üí≥',
            'REFUND': '‚Ü©',
            'ADJUSTMENT': '‚öô',
            'TRANSFER': '‚Üî',
            'BALANCE_TOPUP': 'üí∞',
        }
        icon = icons.get(obj.type, '')
        return format_html('{} {}', icon, obj.get_type_display())
    type_display.short_description = '–¢–∏–ø'
    type_display.admin_order_field = 'type'
    
    def method_display(self, obj):
        """–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"""
        return obj.get_method_display()
    method_display.short_description = '–°–ø–æ—Å–æ–±'
    method_display.admin_order_field = 'method'
    
    def sender_display(self, obj):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"""
        sender = obj.sender
        if sender:
            return format_html(
                '<strong>{}</strong>',
                str(sender)
            )
        return '-'
    sender_display.short_description = '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'
    
    def recipient_display(self, obj):
        """–ü–æ–ª—É—á–∞—Ç–µ–ª—å"""
        recipient = obj.recipient
        if recipient:
            return format_html(
                '<strong>{}</strong>',
                str(recipient)
            )
        return '-'
    recipient_display.short_description = '–ü–æ–ª—É—á–∞—Ç–µ–ª—å'
    
    def amount_display(self, obj):
        """–°—É–º–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        color = '#28a745' if obj.type == 'PAYMENT' else '#dc3545' if obj.type == 'REFUND' else '#007bff'
        amount = f"{obj.amount:.2f}"
        return format_html(
            '<span style="color: {}; font-weight: bold; font-size: 1.1em;">{}</span>',
            color,
            amount
        )
    amount_display.short_description = '–°—É–º–º–∞'
    amount_display.admin_order_field = 'amount'
    
    def status_display(self, obj):
        """–°—Ç–∞—Ç—É—Å"""
        colors = {
            'PENDING': '#ffc107',
            'COMPLETED': '#28a745',
            'FAILED': '#dc3545',
            'CANCELLED': '#6c757d',
        }
        color = colors.get(obj.status, '#6c757d')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.85em;">{}</span>',
            color,
            obj.get_status_display()
        )
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    status_display.admin_order_field = 'status'
    
    def invoice_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–≤–æ–π—Å"""
        if obj.invoice:
            url = reverse('admin:core_newinvoice_change', args=[obj.invoice.pk])
            return format_html('<a href="{}">{}</a>', url, obj.invoice.number)
        return '-'
    invoice_link.short_description = '–ò–Ω–≤–æ–π—Å'
    
    def sender_info_display(self, obj):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"""
        sender = obj.sender
        if not sender:
            return '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        info = f'<strong>{sender}</strong><br>'
        info += f'–¢–∏–ø: {sender.__class__.__name__}<br>'
        
        if hasattr(sender, 'balance'):
            balance_str = f"{sender.balance:.2f}"
            info += f'–ë–∞–ª–∞–Ω—Å: {balance_str}'
        
        return format_html(info)
    sender_info_display.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ'
    
    def recipient_info_display(self, obj):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ"""
        recipient = obj.recipient
        if not recipient:
            return '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        info = f'<strong>{recipient}</strong><br>'
        info += f'–¢–∏–ø: {recipient.__class__.__name__}<br>'
        
        if hasattr(recipient, 'balance'):
            balance_str = f"{recipient.balance:.2f}"
            info += f'–ë–∞–ª–∞–Ω—Å: {balance_str}'
        
        return format_html(info)
    recipient_info_display.short_description = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ'


# ============================================================================
# InvoiceItem –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ - —Ç–æ–ª—å–∫–æ inline –≤ NewInvoice
# ============================================================================
# –ü–æ–∑–∏—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —É—Å–ª—É–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (CarService)
