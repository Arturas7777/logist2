from django.db.models.signals import post_save, post_delete, pre_delete, pre_save
from django.dispatch import receiver
from .models import Car, PaymentOLD, InvoiceOLD, Container, WarehouseService, LineService, CarrierService, CarService, DeletedCarService
from .models_billing import NewInvoice
from django.db.models import Sum
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from django.db import transaction
from decimal import Decimal
import logging

logger = logging.getLogger('django')
@receiver(post_save, sender=Container)
def update_related_on_container_save(sender, instance, created, **kwargs):
    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ‚Äî –≤—Å–µ –º–∞—à–∏–Ω—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–∞–∫–æ–π –∂–µ —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏
    # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç bulk_update –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞
    if not instance.pk:
        return
    
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë —É –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if instance.unload_date:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cars_to_update = []
            for car in instance.container_cars.select_related('warehouse').all():
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                car.unload_date = instance.unload_date
                car.status = instance.status
                
                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ü–µ–Ω—ã
                car.update_days_and_storage()
                car.calculate_total_price()
                cars_to_update.append(car)
            
            # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            if cars_to_update:
                Car.objects.bulk_update(
                    cars_to_update,
                    ['unload_date', 'status', 'days', 'storage_cost', 'current_price', 'total_price'],
                    batch_size=50
                )
                logger.info(f"‚úÖ Container {instance.number}: bulk updated {len(cars_to_update)} cars (unload_date + status)")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —Ä–∞–∑–≥—Ä—É–∑–∫–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
            instance.container_cars.update(status=instance.status)
            logger.debug(f"Container {instance.number}: updated status for {instance.container_cars.count()} cars")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º batch WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        from core.utils import WebSocketBatcher
        for car in instance.container_cars.only('id', 'status'):
            WebSocketBatcher.add('Car', car.id, {'status': car.status})
        WebSocketBatcher.flush()
        
    except Exception as e:
        logger.error(f"Failed to update cars for container {instance.id}: {e}")

@receiver(post_save, sender=Car)
def update_related_on_car_save(sender, instance, **kwargs):
    # –û–±–Ω–æ–≤–ª—è–µ–º total_amount –∏–Ω–≤–æ–π—Å–æ–≤ –ú–ê–°–°–û–í–û —á–µ—Ä–µ–∑ bulk_update
    logger.debug(f"üîî Signal post_save triggered for Car {instance.id} ({instance.vin})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –µ—Å—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á
    if not instance.pk:
        logger.debug("Skipping - no PK")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–Ω–≤–æ–π—Å—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        invoices = list(instance.invoiceold_set.all())
        
        if invoices:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∏–Ω–≤–æ–π—Å—ã –≤ –ø–∞–º—è—Ç–∏
            invoices_to_update = []
            for invoice in invoices:
                invoice.update_total_amount()
                invoices_to_update.append(invoice)
            
            # –û–¥–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ N –æ—Ç–¥–µ–ª—å–Ω—ã—Ö
            if invoices_to_update:
                InvoiceOLD.objects.bulk_update(
                    invoices_to_update,
                    ['total_amount', 'paid'],
                    batch_size=50
                )
                logger.debug(f"Bulk updated {len(invoices_to_update)} invoices for car {instance.id}")
    except Exception as e:
        logger.error(f"Failed to update invoices for car {instance.id}: {e}")
    
    # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω–≤–æ–π—Å—ã (NewInvoice)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
    logger.debug(f"Checking NewInvoice update for car {instance.id}, _updating_invoices={getattr(instance, '_updating_invoices', False)}")
    
    if not getattr(instance, '_updating_invoices', False):
        try:
            instance._updating_invoices = True
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –∏–Ω–≤–æ–π—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
            new_invoices = NewInvoice.objects.filter(cars=instance)
            logger.debug(f"Found {new_invoices.count()} NewInvoice(s) for car {instance.vin}")
            
            if new_invoices.exists():
                for invoice in new_invoices:
                    logger.info(f"Regenerating invoice {invoice.number} for car {instance.vin}...")
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    invoice.regenerate_items_from_cars()
                    logger.info(f"‚úÖ Auto-regenerated invoice {invoice.number} for car {instance.vin}")
            else:
                logger.debug(f"No NewInvoice found for car {instance.vin}")
        except Exception as e:
            logger.error(f"‚ùå Failed to update new invoices for car {instance.id}: {e}", exc_info=True)
        finally:
            instance._updating_invoices = False
    else:
        logger.debug(f"Skipping NewInvoice update (recursion protection) for car {instance.id}")


@receiver(post_save, sender=InvoiceOLD)
def update_balances_on_invoice_save(sender, instance, created, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞"""
    try:
        if created:
            # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∏ –±–∞–ª–∞–Ω—Å—ã
            logger.info(f"New invoice created: {instance.number}, amount: {instance.total_amount}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –∏–Ω–≤–æ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            instance.update_total_amount()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if instance.from_entity:
            instance.from_entity.update_balance_from_invoices()
            logger.debug(f"Updated from_entity balance: {instance.from_entity}")
        
        if instance.to_entity:
            instance.to_entity.update_balance_from_invoices()
            logger.debug(f"Updated to_entity balance: {instance.to_entity}")
            
    except Exception as e:
        logger.error(f"Error updating balances on invoice save: {e}")


@receiver(post_delete, sender=InvoiceOLD)
def update_balances_on_invoice_delete(sender, instance, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if instance.from_entity:
            instance.from_entity.update_balance_from_invoices()
            logger.debug(f"Updated from_entity balance after delete: {instance.from_entity}")
        
        if instance.to_entity:
            instance.to_entity.update_balance_from_invoices()
            logger.debug(f"Updated to_entity balance after delete: {instance.to_entity}")
            
    except Exception as e:
        logger.error(f"Error updating balances on invoice delete: {e}")

@receiver(post_save, sender=PaymentOLD)
def update_balance_on_payment_save(sender, instance, **kwargs):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–∞–Ω—Å–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        is_self_payment = (instance.sender == instance.recipient and 
                          instance.sender is not None and 
                          instance.payment_type in ['CASH', 'CARD'])
        
        if is_self_payment:
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ - —Ç–æ–ª—å–∫–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
            if hasattr(instance.sender, 'cash_balance') and hasattr(instance.sender, 'card_balance'):
                if instance.payment_type == 'CASH':
                    instance.sender.cash_balance += instance.amount
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                    if instance.sender.cash_balance < 0:
                        instance.sender.cash_balance = Decimal('0.00')
                        logger.warning(f"–ù–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {instance.sender} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                elif instance.payment_type == 'CARD':
                    instance.sender.card_balance += instance.amount
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                    if instance.sender.card_balance < 0:
                        instance.sender.card_balance = Decimal('0.00')
                        logger.warning(f"–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {instance.sender} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                instance.sender.save()
                logger.info(f"–ü–æ–ø–æ–ª–Ω–µ–Ω {instance.payment_type} –±–∞–ª–∞–Ω—Å –¥–ª—è {instance.sender}: +{instance.amount}")
        else:
            # –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (—Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞)
            if instance.sender:
                if hasattr(instance.sender, 'cash_balance') and hasattr(instance.sender, 'card_balance'):
                    if instance.payment_type == 'CASH':
                        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        if instance.sender.cash_balance >= instance.amount:
                            instance.sender.cash_balance -= instance.amount
                        else:
                            # –ï—Å–ª–∏ –Ω–∞–ª–∏—á–Ω–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å
                            instance.sender.cash_balance = Decimal('0.00')
                            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è {instance.amount}. –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω.")
                        instance.sender.save()
                    elif instance.payment_type == 'CARD':
                        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        if instance.sender.card_balance >= instance.amount:
                            instance.sender.card_balance -= instance.amount
                        else:
                            # –ï—Å–ª–∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å
                            instance.sender.card_balance = Decimal('0.00')
                            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è {instance.amount}. –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω.")
                        instance.sender.save()
                    elif instance.payment_type == 'FROM_BALANCE':
                        # –°–ø–∏—Å–∞–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)
                        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å –Ω–∞–ª–∏—á–Ω–æ–≥–æ, –∑–∞—Ç–µ–º —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ
                        remaining_amount = instance.amount
                        
                        # –°–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        if instance.sender.cash_balance > 0:
                            if instance.sender.cash_balance >= remaining_amount:
                                instance.sender.cash_balance -= remaining_amount
                                remaining_amount = Decimal('0.00')
                            else:
                                remaining_amount -= instance.sender.cash_balance
                                instance.sender.cash_balance = Decimal('0.00')
                        
                        # –ï—Å–ª–∏ –Ω–∞–ª–∏—á–Ω–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ
                        if remaining_amount > 0 and instance.sender.card_balance > 0:
                            if instance.sender.card_balance >= remaining_amount:
                                instance.sender.card_balance -= remaining_amount
                                remaining_amount = Decimal('0.00')
                            else:
                                remaining_amount -= instance.sender.card_balance
                                instance.sender.card_balance = Decimal('0.00')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å—ã –Ω–µ —Å—Ç–∞–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
                        if instance.sender.cash_balance < 0:
                            instance.sender.cash_balance = Decimal('0.00')
                            logger.warning(f"–ù–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {instance.sender} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                        if instance.sender.card_balance < 0:
                            instance.sender.card_balance = Decimal('0.00')
                            logger.warning(f"–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å {instance.sender} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–∞–ª–∏ –≤—Å—é —Å—É–º–º—É
                        if remaining_amount > 0:
                            logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è {instance.amount}. –û—Å—Ç–∞–ª–æ—Å—å: {remaining_amount}")
                        
                        instance.sender.save()
                    logger.info(f"–°–ø–∏—Å–∞–Ω {instance.payment_type} –±–∞–ª–∞–Ω—Å –¥–ª—è {instance.sender}: -{instance.amount}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
            if instance.recipient:
                if hasattr(instance.recipient, 'cash_balance') and hasattr(instance.recipient, 'card_balance'):
                    if instance.payment_type == 'CASH':
                        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        instance.recipient.cash_balance += instance.amount
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                        if instance.recipient.cash_balance < 0:
                            instance.recipient.cash_balance = Decimal('0.00')
                            logger.warning(f"–ù–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è {instance.recipient} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                        instance.recipient.save()
                    elif instance.payment_type == 'CARD':
                        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                        instance.recipient.card_balance += instance.amount
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                        if instance.recipient.card_balance < 0:
                            instance.recipient.card_balance = Decimal('0.00')
                            logger.warning(f"–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è {instance.recipient} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                        instance.recipient.save()
                    elif instance.payment_type == 'BALANCE':
                        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–π)
                        instance.recipient.cash_balance += instance.amount
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –Ω–µ —Å—Ç–∞–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                        if instance.recipient.cash_balance < 0:
                            instance.recipient.cash_balance = Decimal('0.00')
                            logger.warning(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è {instance.recipient} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0.")
                        instance.recipient.save()
                    logger.info(f"–ó–∞—á–∏—Å–ª–µ–Ω {instance.payment_type} –±–∞–ª–∞–Ω—Å –¥–ª—è {instance.recipient}: +{instance.amount}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å-–±–∞–ª–∞–Ω—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if instance.sender:
            instance.sender.update_balance_from_invoices()
        if instance.recipient:
            instance.recipient.update_balance_from_invoices()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        if instance.sender and hasattr(instance.sender, 'invoice_balance'):
            def _notify():
                channel_layer = get_channel_layer()
                async_to_sync(channel_layer.group_send)(
                    "updates",
                    {
                        "type": "data_update",
                        "model": "Client",
                        "id": instance.sender.id,
                        "invoice_balance": str(instance.sender.invoice_balance),
                        "cash_balance": str(instance.sender.cash_balance),
                        "card_balance": str(instance.sender.card_balance)
                    }
                )
            try:
                _notify()
            except Exception as e:
                logger.error(f"Failed to send WebSocket notification: {e}")
        
    except Exception as e:
        logger.error(f"Error updating balances on payment save: {e}")


@receiver(pre_delete, sender=InvoiceOLD)
def adjust_client_on_invoice_delete(sender, instance, **kwargs):
    """–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞.
    –°—á–∏—Ç–∞–µ–º net-–¥–æ–ª–≥ –∫–∞–∫ total_amount - paid_amount –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –¥–æ–ª–≥ –Ω–∞ —ç—Ç—É –≤–µ–ª–∏—á–∏–Ω—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º pre_delete, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –ø–æ—Å—á–∏—Ç–∞—Ç—å paid_amount –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è FK —É –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    try:
        if not instance.client or instance.is_outgoing:
            return
        total = Decimal(str(instance.total_amount or 0))
        paid = PaymentOLD.objects.filter(invoice=instance).aggregate(total=Sum('amount'))['total'] or Decimal('0.00')
        paid = Decimal(str(paid))
        delta = total - paid
        if delta != 0:
            instance.client.debt = Decimal(str(instance.client.debt or 0)) - delta
            instance.client.save()
    except Exception as e:
        logger.error(f"Failed to adjust client debt on invoice delete {instance.id}: {e}")


def _maybe_zero_client(client):
    try:
        if not client:
            return
        has_invoices = client.invoiceold_set.exists()

        has_payments = PaymentOLD.objects.filter(
            from_client=client
        ).exists()
        if not has_invoices and not has_payments:
            client.debt = Decimal('0.00')
            client.cash_balance = Decimal('0.00')
            client.card_balance = Decimal('0.00')
            client.save()
    except Exception:
        pass


def _recalculate_client_debt(client):
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≤–æ–π—Å-–±–∞–ª–∞–Ω—Å–∞"""
    try:
        if not client:
            return
            
        # –°—É–º–º–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        total_invoiced = client.invoiceold_set.filter(
            is_outgoing=False
        ).aggregate(
            total=Sum('total_amount')
        )['total'] or Decimal('0.00')
        
        # –°—É–º–º–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∏–Ω–≤–æ–π—Å–∞–º (–≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞)
        total_paid = PaymentOLD.objects.filter(
            from_client=client,
            invoice__isnull=False  # –¢–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∏–Ω–≤–æ–π—Å–∞–º
        ).aggregate(
            total=Sum('amount')
        )['total'] or Decimal('0.00')
        
        # –ò–Ω–≤–æ–π—Å-–±–∞–ª–∞–Ω—Å = –∏–Ω–≤–æ–π—Å—ã - –ø–ª–∞—Ç–µ–∂–∏
        real_debt = total_invoiced - total_paid
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ debt –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if client.debt != real_debt:
            logger.info(f"Updating client {client.name} debt from {client.debt} to {real_debt}")
            client.debt = real_debt
            client.save(update_fields=['debt'])
            
    except Exception as e:
        logger.error(f"Error recalculating client debt: {e}")


@receiver(post_delete, sender=InvoiceOLD)
def maybe_zero_after_invoice_delete(sender, instance, **kwargs):
    if instance.client:
        _recalculate_client_debt(instance.client)
        _maybe_zero_client(instance.client)

@receiver(post_delete, sender=PaymentOLD)
def update_client_balance_on_payment_delete(sender, instance, **kwargs):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–∞–Ω—Å–æ–≤"""
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å)
        if instance.sender:
            if hasattr(instance.sender, 'cash_balance') and hasattr(instance.sender, 'card_balance'):
                if instance.payment_type == 'CASH':
                    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    instance.sender.cash_balance += instance.amount
                    instance.sender.save()
                elif instance.payment_type == 'CARD':
                    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    instance.sender.card_balance += instance.amount
                    instance.sender.save()
                elif instance.payment_type == 'FROM_BALANCE':
                    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–π)
                    instance.sender.cash_balance += instance.amount
                    instance.sender.save()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (—Å–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞)
        if instance.recipient:
            if hasattr(instance.recipient, 'cash_balance') and hasattr(instance.recipient, 'card_balance'):
                if instance.payment_type == 'CASH':
                    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    instance.recipient.cash_balance -= instance.amount
                    instance.recipient.save()
                elif instance.payment_type == 'CARD':
                    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                    instance.recipient.card_balance -= instance.amount
                    instance.recipient.save()
                elif instance.payment_type == 'BALANCE':
                    # –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ª–∏—á–Ω—ã–π)
                    instance.recipient.cash_balance -= instance.amount
                    instance.recipient.save()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å-–±–∞–ª–∞–Ω—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if instance.sender:
            instance.sender.update_balance_from_invoices()
        if instance.recipient:
            instance.recipient.update_balance_from_invoices()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        if instance.sender and hasattr(instance.sender, 'invoice_balance'):
            def _notify():
                channel_layer = get_channel_layer()
                async_to_sync(channel_layer.group_send)(
                    "updates",
                    {
                        "type": "data_update",
                        "model": "Client",
                        "id": instance.sender.id,
                        "invoice_balance": str(instance.sender.invoice_balance),
                        "cash_balance": str(instance.sender.cash_balance),
                        "card_balance": str(instance.sender.card_balance)
                    }
                )
            try:
                _notify()
            except Exception as e:
                logger.error(f"Failed to send WebSocket notification: {e}")
        
    except Exception as e:
        logger.error(f"Error updating balances on payment delete: {e}")


# –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è CarService –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
_old_contractors = {}

@receiver(pre_save, sender=Car)
def save_old_contractors(sender, instance, **kwargs):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    if instance.pk:
        try:
            old_instance = Car.objects.get(pk=instance.pk)
            _old_contractors[instance.pk] = {
                'warehouse_id': old_instance.warehouse_id,
                'line_id': old_instance.line_id,
                'carrier_id': old_instance.carrier_id
            }
        except Car.DoesNotExist:
            pass

@receiver(post_save, sender=Car)
def create_car_services_on_car_save(sender, instance, **kwargs):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ CarService –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏"""
    if not instance.pk:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤)
    created = kwargs.get('created', False)
    if not created:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
        old_contractors = _old_contractors.get(instance.pk, {})
        if old_contractors:
            warehouse_changed = old_contractors.get('warehouse_id') != instance.warehouse_id
            line_changed = old_contractors.get('line_id') != instance.line_id
            carrier_changed = old_contractors.get('carrier_id') != instance.carrier_id
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Å–ª—É–≥–∏
            if not (warehouse_changed or line_changed or carrier_changed):
                # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                _old_contractors.pop(instance.pk, None)
                return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        _old_contractors.pop(instance.pk, None)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ CarService –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_warehouse_services = set(instance.car_services.filter(service_type='WAREHOUSE').values_list('service_id', flat=True))
        old_line_services = set(instance.car_services.filter(service_type='LINE').values_list('service_id', flat=True))
        old_carrier_services = set(instance.car_services.filter(service_type='CARRIER').values_list('service_id', flat=True))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Å–∫–ª–∞–¥–∞
        if instance.warehouse:
            warehouse_services = WarehouseService.objects.only('id', 'default_price').filter(
                warehouse=instance.warehouse, 
                is_active=True,
                default_price__gt=0
            )
            current_warehouse_service_ids = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            deleted_warehouse_services = set(
                DeletedCarService.objects.filter(
                    car=instance,
                    service_type='WAREHOUSE'
                ).values_list('service_id', flat=True)
            )
            
            for service in warehouse_services:
                current_warehouse_service_ids.add(service.id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if service.id not in deleted_warehouse_services:
                    CarService.objects.get_or_create(
                        car=instance,
                        service_type='WAREHOUSE',
                        service_id=service.id,
                        defaults={'custom_price': service.default_price}
                    )
            
            # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥–∏ —Å–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
            services_to_remove = old_warehouse_services - current_warehouse_service_ids
            if services_to_remove:
                instance.car_services.filter(
                    service_type='WAREHOUSE',
                    service_id__in=services_to_remove
                ).delete()
        else:
            # –ï—Å–ª–∏ —Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ —Å–∫–ª–∞–¥–∞
            instance.car_services.filter(service_type='WAREHOUSE').delete()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ª–∏–Ω–∏–∏
        if instance.line:
            line_services = LineService.objects.only('id', 'default_price').filter(
                line=instance.line, 
                is_active=True,
                default_price__gt=0
            )
            current_line_service_ids = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            deleted_line_services = set(
                DeletedCarService.objects.filter(
                    car=instance,
                    service_type='LINE'
                ).values_list('service_id', flat=True)
            )
            
            for service in line_services:
                current_line_service_ids.add(service.id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if service.id not in deleted_line_services:
                    CarService.objects.get_or_create(
                        car=instance,
                        service_type='LINE',
                        service_id=service.id,
                        defaults={'custom_price': service.default_price}
                    )
            
            # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥–∏ –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
            services_to_remove = old_line_services - current_line_service_ids
            if services_to_remove:
                instance.car_services.filter(
                    service_type='LINE',
                    service_id__in=services_to_remove
                ).delete()
        else:
            # –ï—Å–ª–∏ –ª–∏–Ω–∏—è –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –ª–∏–Ω–∏–∏
            instance.car_services.filter(service_type='LINE').delete()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
        if instance.carrier:
            carrier_services = CarrierService.objects.only('id', 'default_price').filter(
                carrier=instance.carrier, 
                is_active=True,
                default_price__gt=0
            )
            current_carrier_service_ids = set()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
            deleted_carrier_services = set(
                DeletedCarService.objects.filter(
                    car=instance,
                    service_type='CARRIER'
                ).values_list('service_id', flat=True)
            )
            
            for service in carrier_services:
                current_carrier_service_ids.add(service.id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
                if service.id not in deleted_carrier_services:
                    CarService.objects.get_or_create(
                        car=instance,
                        service_type='CARRIER',
                        service_id=service.id,
                        defaults={'custom_price': service.default_price}
                    )
            
            # –£–¥–∞–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
            services_to_remove = old_carrier_services - current_carrier_service_ids
            if services_to_remove:
                instance.car_services.filter(
                    service_type='CARRIER',
                    service_id__in=services_to_remove
                ).delete()
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞
            instance.car_services.filter(service_type='CARRIER').delete()
                
    except Exception as e:
        logger.error(f"Error creating car services: {e}")

@receiver(post_save, sender=WarehouseService)
def update_cars_on_warehouse_service_change(sender, instance, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ CarService –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥ —Å–∫–ª–∞–¥–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —ç—Ç–∏–º —Å–∫–ª–∞–¥–æ–º
        cars = Car.objects.filter(warehouse=instance.warehouse)
        
        for car in cars:
            if instance.is_active and instance.default_price > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                if not DeletedCarService.objects.filter(
                    car=car,
                    service_type='WAREHOUSE',
                    service_id=instance.id
                ).exists():
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService
                    CarService.objects.get_or_create(
                        car=car,
                        service_type='WAREHOUSE',
                        service_id=instance.id,
                        defaults={'custom_price': instance.default_price}
                    )
            else:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Ü–µ–Ω–∞ = 0
                CarService.objects.filter(
                    car=car,
                    service_type='WAREHOUSE',
                    service_id=instance.id
                ).delete()
                
    except Exception as e:
        logger.error(f"Error updating cars on warehouse service change: {e}")

@receiver(post_save, sender=LineService)
def update_cars_on_line_service_change(sender, instance, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ CarService –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥ –ª–∏–Ω–∏–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —ç—Ç–æ–π –ª–∏–Ω–∏–µ–π
        cars = Car.objects.filter(line=instance.line)
        
        for car in cars:
            if instance.is_active and instance.default_price > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                if not DeletedCarService.objects.filter(
                    car=car,
                    service_type='LINE',
                    service_id=instance.id
                ).exists():
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService
                    CarService.objects.get_or_create(
                        car=car,
                        service_type='LINE',
                        service_id=instance.id,
                        defaults={'custom_price': instance.default_price}
                    )
            else:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Ü–µ–Ω–∞ = 0
                CarService.objects.filter(
                    car=car,
                    service_type='LINE',
                    service_id=instance.id
                ).delete()
                
    except Exception as e:
        logger.error(f"Error updating cars on line service change: {e}")

@receiver(post_save, sender=CarrierService)
def update_cars_on_carrier_service_change(sender, instance, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ CarService –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª—É–≥ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —ç—Ç–∏–º –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–º
        cars = Car.objects.filter(carrier=instance.carrier)
        
        for car in cars:
            if instance.is_active and instance.default_price > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
                if not DeletedCarService.objects.filter(
                    car=car,
                    service_type='CARRIER',
                    service_id=instance.id
                ).exists():
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService
                    CarService.objects.get_or_create(
                        car=car,
                        service_type='CARRIER',
                        service_id=instance.id,
                        defaults={'custom_price': instance.default_price}
                    )
            else:
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å CarService –µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Ü–µ–Ω–∞ = 0
                CarService.objects.filter(
                    car=car,
                    service_type='CARRIER',
                    service_id=instance.id
                ).delete()
                
    except Exception as e:
        logger.error(f"Error updating cars on carrier service change: {e}")