"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –Ω–æ–≤—É—é

python manage.py migrate_to_new_billing
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from decimal import Decimal
import logging

logger = logging.getLogger('django')


class Command(BaseCommand):
    help = '–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–Ω–≤–æ–π—Å–æ–≤ –∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –Ω–æ–≤—É—é'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç',
        )
    
    def handle(self, *args, **options):
        dry_run = options.get('dry_run', False)
        force = options.get('force', False)
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç –†–ï–ñ–ò–ú –ü–†–û–í–ï–†–ö–ò (–¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)'))
        
        self.stdout.write(self.style.SUCCESS('=' * 70))
        self.stdout.write(self.style.SUCCESS('–ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –í –ù–û–í–£–Æ –°–ò–°–¢–ï–ú–£ –ò–ù–í–û–ô–°–û–í –ò –ü–õ–ê–¢–ï–ñ–ï–ô'))
        self.stdout.write(self.style.SUCCESS('=' * 70))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'invoices_migrated': 0,
            'invoice_items_created': 0,
            'transactions_migrated': 0,
            'errors': 0,
        }
        
        try:
            # –®–ê–ì 1: –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–æ–≤
            self.stdout.write('\nüìã –®–ê–ì 1: –ú–∏–≥—Ä–∞—Ü–∏—è –∏–Ω–≤–æ–π—Å–æ–≤...')
            stats['invoices_migrated'], stats['invoice_items_created'] = self.migrate_invoices(dry_run, force)
            
            # –®–ê–ì 2: –ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
            self.stdout.write('\nüí≥ –®–ê–ì 2: –ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–µ–π...')
            stats['transactions_migrated'] = self.migrate_payments(dry_run, force)
            
            # –®–ê–ì 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
            self.stdout.write('\nüí∞ –®–ê–ì 3: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...')
            self.sync_balances(dry_run)
            
            # –ò—Ç–æ–≥–∏
            self.stdout.write('\n' + '=' * 70)
            self.stdout.write(self.style.SUCCESS('‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!'))
            self.stdout.write('=' * 70)
            self.stdout.write(f'–ò–Ω–≤–æ–π—Å–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {stats["invoices_migrated"]}')
            self.stdout.write(f'–ü–æ–∑–∏—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {stats["invoice_items_created"]}')
            self.stdout.write(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {stats["transactions_migrated"]}')
            
            if stats['errors'] > 0:
                self.stdout.write(self.style.WARNING(f'‚ö† –û—à–∏–±–æ–∫: {stats["errors"]}'))
            
            if not dry_run:
                self.stdout.write('\n' + self.style.SUCCESS('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É!'))
            else:
                self.stdout.write('\n' + self.style.WARNING('–≠—Ç–æ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. –î–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.'))
                self.stdout.write('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏.')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}'))
            logger.exception('Migration failed')
            return
    
    def migrate_invoices(self, dry_run=False, force=False):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ –≤ NewInvoice"""
        from core.models import InvoiceOLD as Invoice, Company
        from core.models_billing import NewInvoice, InvoiceItem
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        try:
            default_company = Company.objects.get(name="Caromoto Lithuania")
        except Company.DoesNotExist:
            self.stdout.write(self.style.ERROR('–ö–æ–º–ø–∞–Ω–∏—è "Caromoto Lithuania" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!'))
            self.stdout.write('–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑: python manage.py create_default_company')
            return 0, 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–≤–æ–π—Å—ã
        old_invoices = Invoice.objects.all().order_by('issue_date')
        total = old_invoices.count()
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤: {total}')
        
        if total == 0:
            self.stdout.write(self.style.WARNING('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'))
            return 0, 0
        
        migrated = 0
        items_created = 0
        skipped = 0
        
        for old_invoice in old_invoices:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
                if not force and NewInvoice.objects.filter(notes__contains=f'Migrated from old invoice #{old_invoice.id}').exists():
                    skipped += 1
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                recipient = None
                recipient_field = None
                
                if old_invoice.client:
                    recipient = old_invoice.client
                    recipient_field = 'recipient_client'
                elif old_invoice.warehouse:
                    recipient = old_invoice.warehouse
                    recipient_field = 'recipient_warehouse'
                
                if not recipient:
                    self.stdout.write(self.style.WARNING(f'  ‚ö† –ò–Ω–≤–æ–π—Å {old_invoice.number}: –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º'))
                    continue
                
                if not dry_run:
                    with transaction.atomic():
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
                        new_invoice = NewInvoice(
                            number=old_invoice.number,
                            date=old_invoice.issue_date,
                            due_date=old_invoice.issue_date + timezone.timedelta(days=14),  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 14 –¥–Ω–µ–π
                            issuer=default_company,
                            status='ISSUED' if not old_invoice.paid else 'PAID',
                            notes=f'Migrated from old invoice #{old_invoice.id}\nOriginal notes: {old_invoice.notes or ""}',
                        )
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        setattr(new_invoice, recipient_field, recipient)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å
                        new_invoice.save()
                        
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                        for car in old_invoice.cars.all():
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å–ª—É–≥
                            if old_invoice.service_type == 'WAREHOUSE_SERVICES':
                                description = f'–•—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ {car.vin} ({car.brand} {car.year})'
                                unit_price = car.storage_cost or Decimal('0.00')
                                quantity = car.days or 1
                            elif old_invoice.service_type == 'LINE_SERVICES':
                                description = f'–£—Å–ª—É–≥–∏ –ª–∏–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ {car.vin}'
                                unit_price = (car.ocean_freight or Decimal('0.00')) + (car.ths or Decimal('0.00'))
                                quantity = 1
                            elif old_invoice.service_type == 'CARRIER_SERVICES':
                                description = f'–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è –∞–≤—Ç–æ {car.vin}'
                                unit_price = (car.delivery_fee or Decimal('0.00')) + (car.transport_kz or Decimal('0.00'))
                                quantity = 1
                            else:
                                description = f'–£—Å–ª—É–≥–∏ –¥–ª—è –∞–≤—Ç–æ {car.vin}'
                                unit_price = car.total_price or Decimal('0.00')
                                quantity = 1
                            
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                            item = InvoiceItem(
                                invoice=new_invoice,
                                description=description,
                                car=car,
                                quantity=quantity,
                                unit_price=unit_price,
                            )
                            item.save()
                            items_created += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
                        new_invoice.calculate_totals()
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—É—é —Å—É–º–º—É
                        if old_invoice.paid_amount:
                            new_invoice.paid_amount = old_invoice.paid_amount
                        elif old_invoice.paid:
                            new_invoice.paid_amount = new_invoice.total
                        
                        new_invoice.save()
                        
                        migrated += 1
                        
                        if migrated % 10 == 0:
                            self.stdout.write(f'  ‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}/{total}')
                else:
                    migrated += 1
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–Ω–≤–æ–π—Å–∞ {old_invoice.number}: {e}'))
                logger.exception(f'Failed to migrate invoice {old_invoice.id}')
        
        if skipped > 0:
            self.stdout.write(self.style.WARNING(f'  ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ): {skipped}'))
        
        self.stdout.write(self.style.SUCCESS(f'  ‚úì –ò–Ω–≤–æ–π—Å–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}'))
        self.stdout.write(self.style.SUCCESS(f'  ‚úì –ü–æ–∑–∏—Ü–∏–π —Å–æ–∑–¥–∞–Ω–æ: {items_created}'))
        
        return migrated, items_created
    
    def migrate_payments(self, dry_run=False, force=False):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ Transaction"""
        from core.models import PaymentOLD as Payment
        from core.models_billing import Transaction, NewInvoice
        
        old_payments = Payment.objects.all().order_by('date')
        total = old_payments.count()
        
        self.stdout.write(f'–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {total}')
        
        if total == 0:
            self.stdout.write(self.style.WARNING('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'))
            return 0
        
        migrated = 0
        skipped = 0
        
        for old_payment in old_payments:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
                if not force and Transaction.objects.filter(description__contains=f'Migrated from old payment #{old_payment.id}').exists():
                    skipped += 1
                    continue
                
                if not dry_run:
                    with transaction.atomic():
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        trx_type = 'PAYMENT'
                        if '–≤–æ–∑–≤—Ä–∞—Ç' in old_payment.description.lower() or 'refund' in old_payment.description.lower():
                            trx_type = 'REFUND'
                        elif '–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞' in old_payment.description.lower() or 'adjustment' in old_payment.description.lower():
                            trx_type = 'ADJUSTMENT'
                        elif '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' in old_payment.description.lower() or 'topup' in old_payment.description.lower():
                            trx_type = 'BALANCE_TOPUP'
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        new_transaction = Transaction(
                            date=old_payment.date,
                            type=trx_type,
                            method=old_payment.payment_type,
                            amount=old_payment.amount,
                            description=f'Migrated from old payment #{old_payment.id}\n{old_payment.description}',
                            status='COMPLETED',
                        )
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        if old_payment.from_client:
                            new_transaction.from_client = old_payment.from_client
                        elif old_payment.from_warehouse:
                            new_transaction.from_warehouse = old_payment.from_warehouse
                        elif old_payment.from_line:
                            new_transaction.from_line = old_payment.from_line
                        elif old_payment.from_company:
                            new_transaction.from_company = old_payment.from_company
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        if old_payment.to_client:
                            new_transaction.to_client = old_payment.to_client
                        elif old_payment.to_warehouse:
                            new_transaction.to_warehouse = old_payment.to_warehouse
                        elif old_payment.to_line:
                            new_transaction.to_line = old_payment.to_line
                        elif old_payment.to_company:
                            new_transaction.to_company = old_payment.to_company
                        
                        # –°–≤—è–∑—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º –∏–Ω–≤–æ–π—Å–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if old_payment.invoice:
                            try:
                                new_invoice = NewInvoice.objects.get(
                                    notes__contains=f'Migrated from old invoice #{old_payment.invoice.id}'
                                )
                                new_transaction.invoice = new_invoice
                            except NewInvoice.DoesNotExist:
                                pass
                        
                        new_transaction.save()
                        migrated += 1
                        
                        if migrated % 10 == 0:
                            self.stdout.write(f'  ‚úì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}/{total}')
                else:
                    migrated += 1
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f'  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ #{old_payment.id}: {e}'))
                logger.exception(f'Failed to migrate payment {old_payment.id}')
        
        if skipped > 0:
            self.stdout.write(self.style.WARNING(f'  ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ): {skipped}'))
        
        self.stdout.write(self.style.SUCCESS(f'  ‚úì –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated}'))
        
        return migrated
    
    def sync_balances(self, dry_run=False):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.stdout.write(self.style.SUCCESS('  ‚úì –ë–∞–ª–∞–Ω—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã'))
        pass
