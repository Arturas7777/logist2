"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞
"""

from django.core.management.base import BaseCommand
from django.db import connection
from core.services.balance_manager import BalanceManager
from core.models import Client, Warehouse, Line, Company, Carrier
import time


class Command(BaseCommand):
    help = '–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω–¥–µ–∫—Å—ã, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã'

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-balance-recalc',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤',
        )
        parser.add_argument(
            '--validate-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, –Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('=' * 60))
        self.stdout.write(self.style.SUCCESS('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ Logist2'))
        self.stdout.write(self.style.SUCCESS('=' * 60))
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        self.check_indexes()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ connection pooling
        self.check_connection_pooling()
        
        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤
        if options['validate_only']:
            self.validate_balances()
        elif not options['skip_balance_recalc']:
            # 4. –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤
            self.recalculate_balances()
        
        # 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
        
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'))

    def check_indexes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ë–î"""
        self.stdout.write('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤...')
        
        with connection.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è core –º–æ–¥–µ–ª–µ–π
            cursor.execute("""
                SELECT 
                    count(*) as index_count
                FROM pg_indexes 
                WHERE schemaname = 'public' 
                    AND tablename LIKE 'core_%'
            """)
            index_count = cursor.fetchone()[0]
            
            self.stdout.write(f'   –ù–∞–π–¥–µ–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {index_count}')
            
            if index_count < 30:
                self.stdout.write(self.style.WARNING(
                    '   ‚ö†Ô∏è  –ú–∞–ª–æ –∏–Ω–¥–µ–∫—Å–æ–≤! –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.'
                ))
                self.stdout.write(self.style.WARNING(
                    '   –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python manage.py migrate'
                ))
            else:
                self.stdout.write(self.style.SUCCESS('   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã'))

    def check_connection_pooling(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ connection pooling"""
        self.stdout.write('\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ connection pooling...')
        
        from django.conf import settings
        
        conn_max_age = settings.DATABASES['default'].get('CONN_MAX_AGE', 0)
        
        if conn_max_age > 0:
            self.stdout.write(self.style.SUCCESS(
                f'   ‚úÖ Connection pooling –≤–∫–ª—é—á–µ–Ω (CONN_MAX_AGE={conn_max_age}s)'
            ))
        else:
            self.stdout.write(self.style.WARNING(
                '   ‚ö†Ô∏è  Connection pooling –æ—Ç–∫–ª—é—á–µ–Ω'
            ))
            self.stdout.write(self.style.WARNING(
                '   –î–æ–±–∞–≤—å—Ç–µ CONN_MAX_AGE –≤ settings.py'
            ))

    def validate_balances(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤"""
        self.stdout.write('\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–æ–≤...')
        
        issues_found = 0
        entities_checked = 0
        
        for model in [Client, Warehouse, Line, Company, Carrier]:
            model_name = model.__name__
            
            for entity in model.objects.all():
                entities_checked += 1
                validation = BalanceManager.validate_balance_consistency(entity)
                
                if not validation['is_valid']:
                    issues_found += len(validation['issues'])
                    self.stdout.write(self.style.ERROR(
                        f'   ‚ùå {model_name} #{entity.id} ({entity}): '
                        f'{", ".join(validation["issues"])}'
                    ))
        
        self.stdout.write(f'\n   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {entities_checked}')
        
        if issues_found > 0:
            self.stdout.write(self.style.ERROR(
                f'   ‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {issues_found}'
            ))
            self.stdout.write(self.style.WARNING(
                '   –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --validate-only –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            ))
        else:
            self.stdout.write(self.style.SUCCESS(
                '   ‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã'
            ))

    def recalculate_balances(self):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã"""
        self.stdout.write('\nüí∞ –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤...')
        
        start_time = time.time()
        
        try:
            result = BalanceManager.recalculate_all_balances()
            
            elapsed = time.time() - start_time
            
            self.stdout.write(self.style.SUCCESS(
                f'   ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {result["entities_updated"]}'
            ))
            self.stdout.write(f'   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f}s')
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(
                f'   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞: {e}'
            ))

    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(self.style.SUCCESS('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:'))
        self.stdout.write('=' * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º
        stats = {
            '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏': ('Car', ['FLOATING', 'IN_PORT', 'UNLOADED', 'TRANSFERRED']),
            '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã': ('Container', ['FLOATING', 'IN_PORT', 'UNLOADED', 'TRANSFERRED']),
            '–ò–Ω–≤–æ–π—Å—ã': ('Invoice', None),
            '–ü–ª–∞—Ç–µ–∂–∏': ('Payment', None),
            '–ö–ª–∏–µ–Ω—Ç—ã': ('Client', None),
            '–°–∫–ª–∞–¥—ã': ('Warehouse', None),
            '–õ–∏–Ω–∏–∏': ('Line', None),
            '–ö–æ–º–ø–∞–Ω–∏–∏': ('Company', None),
        }
        
        for label, (model_name, statuses) in stats.items():
            from django.apps import apps
            model = apps.get_model('core', model_name)
            
            if statuses:
                # –ú–æ–¥–µ–ª–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
                for status in statuses:
                    count = model.objects.filter(status=status).count()
                    self.stdout.write(f'   {label} ({status}): {count}')
            else:
                count = model.objects.count()
                self.stdout.write(f'   {label}: {count}')
        
        self.stdout.write('=' * 60)
